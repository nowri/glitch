/**		 *  *	GlitchmapDemo *	 *	@update Mar 4, 2012 *	@author nowri.ka *   **/ package  {	import flash.system.Security;	import uk.co.soulwire.gui.SimpleGUI;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import inn.nowri.ka.glitch.timerglitch.TimerGlitch;	/**	 * TimerGlitchDemo	 */	[SWF(backgroundColor="#000000", frameRate="30", width="500", height="511")]	public class TimerGlitchDemo extends Sprite 	{		//	----------------------------------------------------------------		//	CONSTANTS		//	----------------------------------------------------------------		private static const IMG_URL1:String = "img.png";		//	----------------------------------------------------------------		//	PRIVATE MEMBERS		//	----------------------------------------------------------------		private var _timerGlitch : TimerGlitch = new TimerGlitch();		private var bmp : Bitmap;		private var timer:Timer;		//	----------------------------------------------------------------		//	CONSTRUCTOR		//	----------------------------------------------------------------		public function TimerGlitchDemo()		{			TimerGlitch;			Security.allowDomain("*");						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		//	----------------------------------------------------------------		//	PRIVATE METHODS		//	----------------------------------------------------------------		private function init() : void		{			_timerGlitch.addEventListener(Event.COMPLETE, complete);			_timerGlitch.loadImage(IMG_URL1);			bmp = new Bitmap(null);			addChild(bmp);//			bmp.x=200;//			bmp.y=100;//			var _gui:SimpleGUI = new SimpleGUI(this,null,"c");//			_gui.addButton("pause/resume", {callback:timerControl, width:160});//			_gui.addButton("reset", {callback:_timerGlitch.reset, width:160});//			_gui.show();		}		private function complete(event : Event) : void		{			bmp.bitmapData = _timerGlitch.bitmapData;			startGlitchTimer();		}		private function startGlitchTimer() : void		{			timer = new Timer(100);			timer.addEventListener(TimerEvent.TIMER, timerHandler);			timer.start();		}				private function timerControl() : void		{			if(timer)			{				if(timer.running)				{					timer.stop();				}				else				{					timer.start();				}			}		}		//	----------------------------------------------------------------		//	EVENT HANDLERS		//	----------------------------------------------------------------		private function timerHandler(event : TimerEvent) : void		{			var bool:Boolean = _timerGlitch.next();			if(!bool)			{				timer.stop();				timer.removeEventListener(TimerEvent.TIMER, timerHandler);			}		}				private function onAddedToStage(event : Event) : void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			init();		}	}}