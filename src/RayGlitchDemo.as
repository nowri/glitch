package  {	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.system.Security;	import flash.utils.Timer;		import inn.nowri.ka.glitch.timerglitch.RayGlitch;
	/**	 * TimerGlitchDemo	 */	[SWF(backgroundColor="#000000", frameRate="30", width="500", height="511")]	public class RayGlitchDemo extends Sprite 	{		//	----------------------------------------------------------------		//	CONSTANTS		//	----------------------------------------------------------------		private static const IMG_URL1:String = "img.png";		//	----------------------------------------------------------------		//	PRIVATE MEMBERS		//	----------------------------------------------------------------		private var _rayGlitch : RayGlitch = new RayGlitch();		private var bmp : Bitmap;		private var timer:Timer;		//	----------------------------------------------------------------		//	CONSTRUCTOR		//	----------------------------------------------------------------		public function RayGlitchDemo()		{			Security.allowDomain("*");			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		//	----------------------------------------------------------------		//	PRIVATE METHODS		//	----------------------------------------------------------------		private function init() : void		{			_rayGlitch.addEventListener(Event.COMPLETE, complete);			bmp = new Bitmap(null);			addChild(bmp);			bmp.x=0;			bmp.y=0;			_rayGlitch.loadImage(IMG_URL1);		}		private function complete(event : Event) : void		{			bmp.bitmapData = _rayGlitch.bitmapData;			startGlitchTimer();		}		private function startGlitchTimer() : void		{			timer = new Timer(2000);			timer.addEventListener(TimerEvent.TIMER, timerHandler);			timer.start();		}				private function timerControl() : void		{			if(timer)			{				if(timer.running)				{					timer.stop();				}				else				{					timer.start();				}			}		}		//	----------------------------------------------------------------		//	EVENT HANDLERS		//	----------------------------------------------------------------		private function timerHandler(event : TimerEvent) : void		{			var bool:Boolean = _rayGlitch.next();			if(!bool)			{				timer.stop();				timer.removeEventListener(TimerEvent.TIMER, timerHandler);			}		}				private function onAddedToStage(event : Event) : void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			init();		}	}}